#!/usr/bin/python 

import os  
import time 
import datetime
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import Column, Integer, String

class PyTest(): 
	Base   = declarative_base() 
	def __init__(self,name):
		self.engine  = create_engine('sqlite:///' + name + '.db', echo=False)
		self.Session = sessionmaker()
		self.Session.configure(bind=self.engine)
		self.session = self.Session()
                self.Base.metadata.bind = self.engine
                self.Base.metadata.create_all()
	
	def main(self):
		param = self.Parameter(name='hello',val='valsss',desc='description')
		self.session.add(param)
		self.session.commit()

                x = self.session.query(self.Parameter).filter_by(name='hello').all()
                for items in x:
                    print items

	class Parameter(Base):
		__tablename__ = 'parameter'

		#define table properties 
		id 	= Column(Integer, primary_key=True)
                test_id  = Column(Integer)
                batch_id = Column(Integer)
		name	= Column(String(250)) 		
		val	= Column(String(250)) 		
		desc	= Column(String(250)) 		
                
                def __repr__(self):
                    s =  "<Parameter(id='%d', test_id='%d', batch_id='%d', name='%s', val='%s', description='%s')>" % (
                         self.id, self.test_id, self.batch_id, self.name, self.val, self.desc)

                    return s

	class Statistic(Base):
		__tablename__ = 'statistic'

		#define table properties 
		id 	= Column(Integer, primary_key=True) 
                test_id  = Column(String(250)) 		
		val	= Column(String(250)) 		
		desc	= Column(String(250)) 
                
                def __repr__(self):
                    s =  "<Statistic(id='%d', name='%s', val='%s', description='%s')>" % (
                         self.id, self.name, self.val, self.desc)

                    return s

	class Data(Base):
		__tablename__ = 'data'

		#define table properties 
		id 		= Column(Integer, primary_key=True) 
		name	= Column(String(250)) 		
		val		= Column(String(250)) 		
		desc	= Column(String(250)) 		    
                
                def __repr__(self):
                    s =  "<Data(id='%d', name='%s', val='%s', description='%s')>" % (
                         self.id, self.name, self.val, self.desc)

                    return s

	class Test(Base): 
		__tablename__ = 'test'

		#define table properties 
		id 		= Column(Integer, primary_key=True) 
		name	= Column(String(250)) 		
		desc	= Column(String(250)) 
		result  = Column(String(250))
		
		#keys to other tables 
		pid 	= Column(Integer)		    
		sid 	= Column(Integer)		
		did 	= Column(Integer)	
	
if __name__ == "__main__":
    mytest = PyTest('powerapp')
    mytest.main()

